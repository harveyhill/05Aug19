public class ApexP0Exercises {
	//Note: The method signatures are given.


	Author: Vincent Sosa
	Submitted: 8/25/2019
	
	/*
 	* 1. Return the nth Fibonacci number
 	* Test Cases:
 	* Input: 0     Output: 0
 	* Input: 1    Output: 1
 	* Input: 2     Output: 1
 	* Input: 10    Output: 55
	*/
    
	public static Integer nFibonacci( Integer n ){
        IF (n==0){
            return n;
        } ELSE IF(n==1){
            return n;
        } ELSE{
            n = nFibonacci(n-1) + nFibonacci(n-2);
            return n;
        }
	}

	/*
 	* 2. Sort an array of integers.
 	* Test Cases:
 	* Input: [2,4,5,1,3,1]     Output: [1,1,2,3,4,5]
 	* Input: [5,4,3,2,1]     Output: [1,2,3,4,5]
 	*
 	* Don't use the sort() method... that would be lame.
	*/
	public static Integer[] sortArray( Integer[] intList ) {
		for(Integer i = 0; i < intList.size(); i++){
            for(Integer j = i; j < intList.size(); j++){
                Integer temp;
                if(intList[i]>intList[j]){
                    temp = intList[i];
                    intList[i] = intList[j];
                    intList[j] = temp;
                }
            }
        }                
        //system.debug(intList);
        return intList;
	}

	/*
 	* 3. Return the factorial of n.
 	* Test Cases:
 	* Input: 0    Output: 1
 	* Input: 1    Output: 1
 	* Input: 3    Output: 6
	*/
	public static Integer nFactorial( Integer n) {
        if(n==0 || n==1){
            n = 1;
        } else {
			n =	n * nFactorial(n-1);
        }
        return n;
	}

	/*
 	* 4. Rotate left
 	* Given an array, array, and an integer, n, rotate the values in array left n times and return array
 	* Test Cases:
 	* Input: [1,2,3,4,5], 1    Output: [2,3,4,5,1]
 	* Input: [1,2,3,4,5], 6    Output: [2,3,4,5,1]
 	* Input: [1,2,3,4,5], 3    Output: [4,5,1,2,3]
	*/
	public static Integer[] rotateLeftNTimes( Integer[] arrayLeft, Integer n) {
        Integer temp;
        for(Integer i = 0; i < n; i++){
            temp = arrayLeft[0];
            for(Integer j = 0; j < arrayLeft.size()-1; j++){
            	arrayLeft[j] = arrayLeft[j+1];
        	}
            arrayLeft[arrayLeft.size()-1] = temp;
        }
        return arrayLeft;
	}

	/*
 	* 5. Balanced Brackets
 	* A bracket is any one of the following: (, ), {, }, [, or ]
 	* 
 	* The following are balanced brackets:
 	*    ( )
 	*    ( ) ( )
 	*    ( ( ) )
 	*    ( { [ ] } )
 	*
 	* The following are NOT balanced brackets:
 	*   (
 	*   )
 	*   ( ( )
 	*   ( [ ) ]
 	*
 	* Return true if balanced
 	* Return false if not balanced
	*/
	public static Boolean bracketsAreBalanced( String s ) {
        for(Integer i = 0; i < s.length(); i++){
            
        }
        return s;
	}
	
	/* You should NOT be submitting answers that you find online. You will be expected to be able to defend any of these solutions without notice. */
// 
	/*
 	* 6. Create a method that retrieves a list of all accounts and updates those accounts.
 	*      Create a custom field on the Account standard object called Size__c that will be a 
 	* picklist containing small/medium/large.
 	*     Create a method that retrieves a list of all accounts. 
 	*         - If an account has between 1-1000 employees then it is classified as small.
 	*         - If an account has between 1001-10000 employees it is classified as medium.
	*         - If an account has more than 10000 employees it is classified as large.
 	*     Update the Size__c field on each account to reflect the amount of employees in the Account.

	// NumberOfEmployees
	// SELECT Name, NumberOfEmployees, Size__c FROM Account
	*/
	public static void updateAccountSize( ) {
        List<Account> updateAcct = [SELECT Name, NumberOfEmployees, Size__c FROM Account];
        for(Account a: updateAcct){
            if(a.NumberOfEmployees <= 1000){
                a.Size__c = 'Small';
            } else if(a.NumberOfEmployees >= 1001 && a.NumberOfEmployees <= 10000){
                a.Size__c = 'Medium';
            } else{
                a.Size__c = 'Large';
            }
        }
        update updateAcct;
	}
	
	/* 
 	* 7. Create a method that will find all leads that contain 'ca' in their fields. 
 	*     If a lead is located in California(CA), change their Lead Status field to 'Closed - Not 
 	* Converted' and their description should display the message, "We are no longer doing 
 	* business in California."
 	*/
	public static void updateCALeads( ) {
		List<Lead> updatel = [SELECT Name, State, Status FROM Lead];
        for(Lead l: updatel){
            if(l.State == 'CA'){
                l.Status = 'Closed - Not Converted';
            }
        }
        update updatel;
    }
	
	/*
 	* 8. Create a method that will find all Opportunities which have already passed their Close Date 
 	* and have a Stage field that is not 'Closed Won'. Since they have passed their Close Date and 
 	* they are not marked as 'Closed Won', they should be marked as 'Closed Lost'.
 	*/
	public static void closePastDueOpportunities( ) {
		List<Opportunity> updateOp = [SELECT Name, CloseDate, StageName FROM Opportunity];
        for(Opportunity op: updateOp){
            if(op.StageName != 'Closed Won' && op.CloseDate != Date.Today()){
                op.StageName = 'Closed Lost';
            }
        }
        update updateOp;
	}
}