public class ApexP0Exercises{
////////////////////////////////////////////////////////////
//
//	ApexP0Exercises
//	Created on: 8/21/19
//	Due on: 8/26/19
//	Author: William Brown III
//	Description: 8 Problems, solve them
//
////////////////////////////////////////////////////////////
	private String name;
    
    // Default Constructor
    public ApexP0Exercises(String name){
        this.name = name;
    }
    
    // Fibonacci
    public static Integer nFibonacci(Integer n){
        if(n == 0){
            return 0;
        }
        if(n == 1){
            return 1;
        }
        return nFibonacci(n-1) + nFibonacci(n-2); 
    }
    
    // Sort Array
    public static Integer[] sortArray(Integer[] intList){
        for(Integer j = 1; j < intList.size(); j++){
            Integer num = intList[j];
            Integer i = j-1;
            
            while((i >=0) && (intList[i] > num)){
                intList[i+1] = intList[i];
                i--;
            }
            intList[i+1] = num;
        }
        return intList;
    }
    
    // Return the factorial of n
    // Factorial
    public static Integer nFactorial(Integer n){
        if(n == 0 || n == 1){
            return 1;
        }
        return n * nFactorial(n-1);
    }
    
    // Rotate Left
    // Given an array and an integer, rotate the values in array left times
    public static Integer[] rotateLeftNTimes(Integer[] arrays, Integer n){
        List<Integer> result = new List<Integer>();
        Integer size = arrays.size();
        Integer mod = Math.mod(n, size);
        for(Integer i = 0; i < size; i++){
            result.add(arrays[Math.mod((i+mod), size)]);
        }
        return result;
    }
    
    // Return true if brackets are balanced
    // Balanced Brackets
    public static Boolean bracketsAreBalanced(String s){
        Integer bracket;
        Stack stack = new Stack();
        for(Integer i = 0; i < s.length(); i++){
            bracket = s.charAt(i);
            if(bracket == 123 || bracket == 91 || bracket == 40){ //bracket == '{' || bracket == '[' || bracket == '('
                stack.push(bracket);
            } else {
                if(bracket == 125){ // bracket == '}'
                    bracket = 123; // bracket = '{'
                }
                else if(bracket == 93){ // bracket == ']'
                    bracket = 91; // bracket = '['
                }
                else if(bracket == 41){ // bracket == ')'
                    bracket = 40; // bracket = '('
                }
                
                if(stack.isEmpty()){
                    return false;
                }
                if(bracket == stack.peek()){
                    stack.pop();
                } else {
                    return false;
                }
            }
        }
        return true;
    }

    // Update Account Size
    // based on number of employees it will update the Size__c field
    public static void updateAccountSize(){
        List<Account> getAccounts = [SELECT name, NumberOfEmployees, Size__c FROM Account];
        List<Account> updatedList = new List<Account>();
        Account newA;

        for(Account a: getAccounts){
            newA = a;
            if (a.NumberOfEmployees <= 1000){
                a.Size__c = 'small';
            }else if(a.NumberOfEmployees >= 1001 && a.NumberOfEmployees <= 10000){
                a.Size__c = 'medium';       
            }else{
                a.Size__c='large';
            }
            updatedList.add(newA);
        }
        	database.update(updatedList);
	}

    /* Will find all leads that contain 'ca' in their fields. 
    * If a lead is located in California(CA), change their Lead Status field to 'Closed - Not 
    * Converted' and their description should display the message, "We are no longer doing 
    * business in California."
    */
    // Update CA Leads
    public static void updateCALeads(){
        List<Lead> getLeads = [SELECT id, Address, Status, Description FROM Lead];
        List<Lead> dbUpdate = new List<Lead>();

        for(Lead lead : getLeads){
            Address leadAddress = lead.Address;

            // To hold this specific lead
            Lead forUpdate = lead;

            if(leadAddress.state == 'CA'){
                forUpdate.Description = 'We are no longer doing business in California.';
                forUpdate.Status = 'Closed - Not Converted';
                dbUpdate.add(forUpdate);
            }
        }
        database.update(dbUpdate);
    }

    /*Create a method that will find all Opportunities which have already passed their Close Date 
    * and have a Stage field that is not 'Closed Won'. Since they have passed their Close Date and 
    * they are not marked as 'Closed Won', they should be marked as 'Closed Lost'.
    */
    // Close Past Due Opportunities
    public static void closePastDueOpportunities(){
        List<Opportunity> getOpps = [SELECT stagename, closeDate FROM Opportunity WHERE stagename != 'Closed Won'];
        List<Opportunity> dbUpdate = new List<Opportunity>();

        for(Opportunity o : getOpps){
            if(o.closeDate < Date.Today()){
                o.stagename = 'Closed Lost';
                dbUpdate.add(o);
            }
        }
        database.update(dbUpdate);
    } 
    
    public class StackUnderflowException extends Exception {
    /* Custom exception */
	}
    
    public class Stack {
    private List<Object> items {get; set;}
    
    public Stack() {
        this.items = new List<Object>();
    }
    
    public Integer size() {
        return this.items.size();
    }

    public Boolean isEmpty() {
        return size() == 0;
    }
        
    public void push(Object itemToPush) {
        this.items.add(itemToPush);
    }
    
    public Object pop() {
        if (isEmpty()) {
            throw new StackUnderflowException();
        }
        
        return this.items.remove(size() - 1);
    }
    
    public Object peek() {
        if (isEmpty()) {
            throw new StackUnderflowException();
        }
        
        return this.items.get(size() - 1);
    }    
}

    // String p = '([)]';
    // system.debug(bracketsAreBalanced(p));
    // system.debug('Hello world, oh yeh its');

}