public class ApexP0Exercises {    public static Integer nFibonacci( Integer n ){        if (n <= 1)        	return n;       	return nFibonacci(n-1) + nFibonacci(n-2);    }        public static Integer[] sortArray( Integer[] intList ){        for(Integer i=0; i <intList.size(); i++){        	for(Integer j=i; j<intList.size(); j++){   				Integer x;            	if(intList[i]>intList[j]){                	x=intList[i];               	 	intList[i]=intList[j];                	intList[j]=x;                }            }        }        return intList;	}          public static Integer nFactorial( Integer n){        return (n==1 || n==0) ? 1 : n*nFactorial(n-1);    }            public static Integer[] rotateLeftNTimes( Integer[] arrayBot, Integer n) {        Integer x;        for (Integer i=0; i<n; i++){            x=arrayBot[0];            for (Integer j=0; j<arrayBot.size()-1; j++){                arrayBot[j]= arrayBot[j+1];            }            arrayBot[arrayBot.size()-1]=x;        }        return arrayBot;    }                /* public static Boolean bracketsAreBalanced( String s ) {        String s='(';           }*/           public static void updateAccountSize(){               List<Account> updateAccount = [SELECT name, NumberOfEmployees, Size__c FROM Account];        for(Account a: updateAccount){            if (a.NumberOfEmployees<=1000){            a.Size__c='small';                }else if            (a.NumberOfEmployees>=1001 && a.NumberOfEmployees>=10000){            a.Size__c='medium';                       }else{                    a.Size__c='large';                }        	}        	update updateAccount;		}       	public static void updateCALeads( ) {        List<Lead> contactLead = new List <Lead>();        contactLead=[select address, status, description from Lead];        for(Lead l: contactLead){            if(l.Address!=null){            address Detail = l.address;            if(Detail.getCountryCode()=='US'){            if (detail.getState() == 'CA'){                l.status = 'Closed - Not Converted';            	l.Description= 'We Are No Longer Located In CA';       			 }           	   }            }        }                    update contactLead;	}       	public static void closePastDueOpportunities( ) {    Date actualDate= Date.today();        List<Opportunity> pastOpportunities = new List <Opportunity>();        pastOpportunities=[select stagename, closedate, name from opportunity where closedate<:actualDate and  stagename!='Closed Won'];        for(Opportunity o: pastOpportunities){            o.stagename ='Closed Lost';            }        update pastOpportunities;           	}   }