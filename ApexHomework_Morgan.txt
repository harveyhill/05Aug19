public class ApexP0Exercises {
    /*
 * 1. Return the nth Fibonacci number
 * Test Cases:
 * Input: 0     Output: 0
 * Input: 1    Output: 1
 * Input: 2     Output: 1
 * Input: 10    Output: 55
*/
      public static Integer nFibonacci(Integer n){
        if (n == 0){
            return n;
        }else if(n == 1){
            return n;
        }
         return (nFibonacci(n-1) + nfibonacci(n-2));
    }
    
    
    /*
 * 2. Sort an array of integers.
 * Test Cases:
 * Input: [2,4,5,1,3,1]     Output: [1,1,2,3,4,5]
 * Input: [5,4,3,2,1]     Output: [1,2,3,4,5]
 *
 * Don't use the sort() method... that would be lame.
*/
    
 public static Integer[] sortArray( Integer[] intList ) {
    	for(Integer i= 0; i < intList.size(); i++ ){
            for(Integer j =i; j< intList.size(); j++){
               Integer x;
                if(intList[i]>intList[j]){
                    x= intList[i];
                    intList[i]=intList[j];
                    intList[j]= x; 
                }
            }
        }
    
    return intList;
}
    
  /*
 * 3. Return the factorial of n.
 * Test Cases:
 * Input: 0    Output: 1
 * Input: 1    Output: 1
 * Input: 3    Output: 6
*/
    
    public static Integer nFactorial( Integer n) {
       
        //base case 0 and 1 will always be 0 or 1;
        if(n == 0){
            return n;
        }else if(n ==1){
            return n;
        }
        Integer x = 1;
        //iterate the amount of n and starting at 2
        for(Integer i = n; i > 1; i-- ){
            x = x * i;
            
        }
        
        return x;
        
        
}
    
   /*
 * 4. Rotate left
 * Given an array, array, and an integer, n, rotate the values in array left n times and return array
 * Test Cases:
 * Input: [1,2,3,4,5], 1    Output: [2,3,4,5,1]
 * Input: [1,2,3,4,5], 6    Output: [2,3,4,5,1]
 * Input: [1,2,3,4,5], 3    Output: [4,5,1,2,3]
*/
    
 public static Integer[] rotateLeftNTimes( Integer[] arrayWhy, Integer n) {
       Integer x;
        for (Integer i=0; i<n; i++){
            x=arrayWhy[0];
            for (Integer j=0; j<arrayWhy.size()-1; j++){
                arrayWhy[j]= arrayWhy[j+1];
            }
            arrayWhy[arrayWhy.size()-1]=x;
        }
        return arrayWhy;
}//rotateLeftNTimes end
 
    
    
/*
 * 5. Balanced Brackets
 * A bracket is any one of the following: (, ), {, }, [, or ]
 * 
 * The following are balanced brackets:
 *    ( )
 *    ( ) ( )
 *    ( ( ) )
 *    ( { [ ] } )
 *
 * The following are NOT balanced brackets:
 *   (
 *   )
 *   ( ( )
 *   ( [ ) ]
 *
 * Return true if balanced
 * Return false if not balanced
*/
   // 
//public static Boolean bracketsAreBalanced( String s ) {
  /*  List<String> bracketList = List<String>['(',')','{','}','[',']']
        //base case
        if(s == ')' || s == '}' || s == ']'){
            return false;
        }else if(s == '(' && bracketList[1]  ){
            //Boolean b = Boolean.bracketsAreBalanced('true');
   		return true;
        }
}
   
*/
    
   /*
 * 6. Create a method that retrieves a list of all accounts and updates those accounts.
 *      Create a custom field on the Account standard object called Size__c that will be a 
 * picklist containing small/medium/large.
 *     Create a method that retrieves a list of all accounts. 
 *         - If an account has between 1-1000 employees then it is classified as small.
 *         - If an account has between 1001-10000 employees it is classified as medium.
*         - If an account has more than 10000 employees it is classified as large.
 *     Update the Size__c field on each account to reflect the amount of employees in the Account.
*/
    

    
 public static void updateAccountSize(){
     List<Account> accountList = [SELECT Size__c, NumberOfEmployees FROM Account];
 
     for(Account a: accountList){
         if(a.NumberOfEmployees < 1000) {
              a.Size__c = 'Small';
         }else if(a.NumberOfEmployees >= 1000 && a.NumberOfEmployees < 10000){
             a.Size__c = 'Medium';
         }else{
             a.Size__c = 'Large';
         }
         update accountList;
     }
 
 
 }
/* 
 * 7. Create a method that will find all leads that contain 'ca' in their fields. 
 *     If a lead is located in California(CA), change their Lead Status field to 'Closed - Not 
 * Converted' and their description should display the message, "We are no longer doing 
 * business in California."
 */
public static void updateCALeads(){
	List<Lead> lead = [SELECT State, Status, Description FROM Lead];
    for(Lead a : lead){
        if(a.State == 'ca'){
            a.Status = 'Closed- Not Converted';
            a.Description = 'We are no longer doing business in California';
        }
        update lead;
    }    
}    
/*
 * 8. Create a method that will find all Opportunities which have already passed their Close Date 
 * and have a Stage field that is not 'Closed Won'. Since they have passed their Close Date and 
 * they are not marked as 'Closed Won', they should be marked as 'Closed Lost'.
 */
public static void closePastDueOpportunities( ) {
	List<Opportunity> opp = [SELECT CLoseDate, StageName FROM Opportunity];
    for(Opportunity o: opp){
        if(o.CloseDate > o.CloseDate && o.StageName != 'Closed Won'){
            o.StageName = 'Closed Lost';
        }
        update opp;
    }
}
    
    
    
}



//Execution codes:

System.debug(ApexP0Exercises.nFibonacci(10));
List<Integer> intList = new List<Integer>{2,4,5,1,3,1};
System.debug(ApexP0Exercises.sortArray(intList)); 
System.debug(ApexP0Exercises.nFactorial(6));
 List<Integer> arrayWhy = new List<Integer>{1,2,3,4,5};
    System.debug(ApexP0Exercises.rotateLeftNTimes(arrayWhy, 1));
ApexP0Exercises.updateAccountSize();
ApexP0Exercises.updateCALeads();
ApexP0Exercises.closePastDueOpportunities();