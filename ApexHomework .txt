Write the following methods in a class called ApexP0Exercises. 
Note: The method signatures are given.

/*
 * 1. Return the nth Fibonacci number
 * Test Cases:
 * Input: 0     Output: 0
 * Input: 1    Output: 1
 * Input: 2     Output: 1
 * Input: 10    Output: 55
*/
public static Integer nFibonacci( Integer n ){
if(n<=1){
            return n;
        }
        return nFibonacci(n-1) + nFibonacci(n-2);

}

/*
 * 2. Sort an array of integers.
 * Test Cases:
 * Input: [2,4,5,1,3,1]     Output: [1,1,2,3,4,5]
 * Input: [5,4,3,2,1]     Output: [1,2,3,4,5]
 *
 * Don't use the sort() method... that would be lame.
*/
public static Integer[] sortArray( Integer[] intList ) {
for(Integer i = 0; i < intList.size(); i++){
            for(Integer j = i; j < intList.size(); j++){
                Integer buck;
                if(intList[i]>intList[j]){
                    buck = intList[i];
                    intList[i]=intList[j];
                    intList[j] = buck;
                }
                
                
            }
            
        }
        return intList;

}

/*
 * 3. Return the factorial of n.
 * Test Cases:
 * Input: 0    Output: 1
 * Input: 1    Output: 1
 * Input: 3    Output: 6
*/
public static Integer nFactorial( Integer n) {
Integer ans = 1;
        for(Integer k = 1; k<=n; k++){
            ans *= k;
        }
        return ans;

}

/*
 * 4. Rotate left
 * Given an array, array, and an integer, n, rotate the values in array left n times and return array
 * Test Cases:
 * Input: [1,2,3,4,5], 1    Output: [2,3,4,5,1]
 * Input: [1,2,3,4,5], 6    Output: [2,3,4,5,1]
 * Input: [1,2,3,4,5], 3    Output: [4,5,1,2,3]
*/
public static Integer[] rotateLeftNTimes( Integer[] arrayName, Integer n) {
        Integer x;
        for(Integer i =0; i<n; i++){
            x=arrayName[0];
            for(Integer y=0; y<arrayName.size()-1; y++){
                arrayName[y]=arrayName[y+1];
            }
            arrayName[arrayName.size()-1]=x;
        }
        return arrayName;
    }

/*
 * 5. Balanced Brackets
 * A bracket is any one of the following: (, ), {, }, [, or ]
 * 
 * The following are balanced brackets:
 *    ( )
 *    ( ) ( )
 *    ( ( ) )
 *    ( { [ ] } )
 *
 * The following are NOT balanced brackets:
 *   (
 *   )
 *   ( ( )
 *   ( [ ) ]
 *
 * Return true if balanced
 * Return false if not balanced
*/
public static Boolean bracketsAreBalanced( String s ) {
 
}
 
/* You should NOT be submitting answers that you find online. You will be expected to be able to defend any of these solutions without notice. */
 
/*
 * 6. Create a method that retrieves a list of all accounts and updates those accounts.
 *      Create a custom field on the Account standard object called Size__c that will be a 
 * picklist containing small/medium/large.
 *     Create a method that retrieves a list of all accounts. 
 *         - If an account has between 1-1000 employees then it is classified as small.
 *         - If an account has between 1001-10000 employees it is classified as medium.
*         - If an account has more than 10000 employees it is classified as large.
 *     Update the Size__c field on each account to reflect the amount of employees in the Account.
*/
public static void updateAccountSize( ) {
        List<Account> updateGroup = [SELECT name, Size__c, NumberOfEmployees FROM Account];
        for(Account a: updateGroup){
            if(a.NumberOfEmployees <= 1000){
                a.Size__c = 'small';
            }
            else if(a.NumberOfEmployees >= 1001 && a.NumberOfEmployees < 10000){
                a.Size__c = 'medium';
            }else if (a.NumberOfEmployees > 10000){
                a.Size__c = 'large';
            }
        }
        update updateGroup;
    }
 
/* 
 * 7. Create a method that will find all leads that contain 'ca' in their fields. 
 *     If a lead is located in California(CA), change their Lead Status field to 'Closed - Not 
 * Converted' and their description should display the message, "We are no longer doing 
 * business in California."
 */
public static void updateCALeads( ) {
 
}
 
/*
 * 8. Create a method that will find all Opportunities which have already passed their Close Date 
 * and have a Stage field that is not 'Closed Won'. Since they have passed their Close Date and 
 * they are not marked as 'Closed Won', they should be marked as 'Closed Lost'.
 */
public static void closePastDueOpportunities( ) {
List<Opportunity> updateOp = [SELECT Name, CloseDate, StageName FROM Opportunity];
        for(Opportunity op: updateOp){
            if(op.StageName != 'Closed Won' && op.CloseDate != Date.Today()){
                op.StageName = 'Closed Lost';
            }
        }
        update updateOp;

}